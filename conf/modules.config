/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FAIDX {
        publishDir = [
            path: { "${params.outdir}/reference" },
            pattern: "*fai"
        ]
        ext.args = ''
    }

    withName: CREATESEQUENCEDICTIONARY {
        publishDir = [
            path: { "${params.outdir}/reference" },
            pattern: "*dict"
        ]
        ext.args = ''
    }

    withName: COMPOSESTRTABLEFILE {
        publishDir = [
            path: { "${params.outdir}/reference" },
            pattern: "*zip"
        ]
        ext.args = ''
    }

    withName: BEDTOOLS_SPLIT {
        ext.args = ''
    }

    withName: CALIBRATEDRAGSTRMODEL {
        ext.args = ''
    }

    withName: HAPLOTYPECALLER {
        cpus        = { check_max( 1 * task.attempt, 'cpus' ) }
        ext.prefix  = {"${meta.id}.g"}
        ext.args    = '-ERC GVCF -contamination "0" -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90 -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation'
    }

    withName: BCFTOOLS_CONCAT {
        ext.args = '-a'
    }

    withName: TABIX_GVCFS {
        ext.args = ''
    }

    withName: REBLOCKGVCF {
        ext.args = '-do-qual-approx --floor-blocks -GQB 20 -GQB 30 -GQB 40'
    }

    withName: COMBINEGVCFS {
        ext.args = ''
    }

    withName: TABIX_COMBINED_GVCFS {
        ext.args = ''
    }

    withName: GENOTYPE_GVCFS {
        ext.args = '--allow-old-rms-mapping-quality-annotation-data -G StandardAnnotation -G AS_StandardAnnotation'
    }

    withName: BCFTOOLS_STATS {
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/bcftools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCFTOOLS_.*'{
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reports/vcftools" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: VCFTOOLS_TSTV_COUNT{
        ext.args = "--TsTv-by-count"
    }

    withName: VCFTOOLS_TSTV_QUAL{
        ext.args = "--TsTv-by-qual"
    }

    withName: VCFTOOLS_SUMMARY{
        ext.args = "--FILTER-summary"
    }

    withName: ENSEMBLVEP {
        if(!params.vep_merged_cache){
            container = "nfcore/vep:${params.vep_version}.${params.genome}"
        }
        ext.args = [
            '--everything --filter_common --per_gene --total_length --offline --force_overwrite --buffer_size 100000 --hgvsg --shift_hgvs 1 --humdiv --var_synonyms',
            (params.vep_dbnsfp && params.dbnsfp)                                  ? "--plugin dbNSFP,${params.dbnsfp.split('/')[-1]},rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF" : '',
            (params.vep_spliceai && params.spliceai_snv && params.spliceai_indel) ? "--plugin SpliceAI,snv=${params.spliceai_snv.split('/')[-1]},indel=${params.spliceai_indel.split('/')[-1]}"                     : '',
            (params.vep_spliceregion)                                             ? '--plugin SpliceRegion' : '',
            (params.vep_mastermind && params.mastermind)                          ? "--plugin Mastermind,${params.mastermind.split('/')[-1]}" : '',
            (params.vep_eog && params.eog)                                        ? "--custom ${params.eog.split('/')[-1]},EOG,vcf,overlap,0,AF" : '',
            (params.vep_merged_cache)                                                ? '--merged' : '',
        ].join(' ').trim()
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MULTIQC {
        errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
        ext.args      = { params.multiqc_config ? "--config $multiqc_custom_config" : "" }
    }

}
